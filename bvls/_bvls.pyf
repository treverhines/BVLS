!    -*- f90 -*-
! Note: the context of this file is case sensitive.

python module _bvls ! in 
    interface  ! in :_bvls
        subroutine bvls(m,n,a,b,bnd,x,rnorm,nsetp,w,index_bn,ierr) ! in :_bvls:_bvls.f90
            integer(kind=4), intent(hide),depend(a) :: m=shape(a,0)
            integer(kind=4), intent(hide),depend(a) :: n=shape(a,1)
            real(kind=8) intent(in),dimension(m,n) :: a
            real(kind=8) intent(in,copy),dimension(m),depend(m) :: b
            real(kind=8) intent(in),dimension(2,n),depend(n) :: bnd
            real(kind=8) intent(out),dimension(n),depend(n) :: x
            real(kind=8) intent(out):: rnorm
            integer(kind=4) intent(out),depend(n):: nsetp
            real(kind=8) intent(out),dimension(n),depend(n) :: w
            integer(kind=4) intent(out),dimension(n),depend(n) :: index_bn
            integer(kind=4) intent(out):: ierr
        end subroutine bvls
        subroutine bvls_report(m,n,a,b,bnd,x,rnorm,nsetp,w,index_bn,ierr) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            real(kind=8) dimension(m,n) :: a
            real(kind=8) dimension(m),depend(m) :: b
            real(kind=8) dimension(2,n),depend(n) :: bnd
            real(kind=8) dimension(n),depend(n) :: x
            real(kind=8) :: rnorm
            integer(kind=4) :: nsetp
            real(kind=8) dimension(n),depend(n) :: w
            integer(kind=4) dimension(n),depend(n) :: index_bn
            integer(kind=4) :: ierr
        end subroutine bvls_report
        subroutine constrained_feasible(nsetp,index_bn,bnd,x,z,hitbnd,alpha,jj,ibound) ! in :_bvls:_bvls.f90
            integer(kind=4) :: nsetp
            integer(kind=4) dimension(*) :: index_bn
            real(kind=8) dimension(2,*) :: bnd
            real(kind=8) dimension(*) :: x
            real(kind=8) dimension(*) :: z
            logical(kind=4) :: hitbnd
            real(kind=8) :: alpha
            integer(kind=4) :: jj
            integer(kind=4) :: ibound
        end subroutine constrained_feasible
        subroutine htc(p,m,u,up) ! in :_bvls:_bvls.f90
            integer(kind=4) :: p
            integer(kind=4), optional,check(len(u)>=m),depend(u) :: m=len(u)
            real(kind=8) dimension(m) :: u
            real(kind=8) :: up
        end subroutine htc
        subroutine initialize(m,n,a,b,bnd,ierr,index_bn,iter,itmax,iz,iz1,iz2,j,npp1,nsetp,w,x) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            real(kind=8) dimension(m,n) :: a
            real(kind=8) dimension(m),depend(m) :: b
            real(kind=8) dimension(2,n),depend(n) :: bnd
            integer(kind=4) :: ierr
            integer(kind=4) dimension(n),depend(n) :: index_bn
            integer(kind=4) :: iter
            integer(kind=4) :: itmax
            integer(kind=4) :: iz
            integer(kind=4) :: iz1
            integer(kind=4) :: iz2
            integer(kind=4) :: j
            integer(kind=4) :: npp1
            integer(kind=4) :: nsetp
            real(kind=8) dimension(n),depend(n) :: w
            real(kind=8) dimension(n),depend(n) :: x
        end subroutine initialize
        subroutine move_coef_i(m,n,i,ibound,bnd,jj,b,a,x,nsetp,index_bn,npp1,iz1) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(len(b)>=m),depend(b) :: m=len(b)
            integer(kind=4), optional,check(shape(bnd,1)==n),depend(bnd) :: n=shape(bnd,1)
            integer(kind=4) :: i
            integer(kind=4) :: ibound
            real(kind=8) dimension(2,n) :: bnd
            integer(kind=4) :: jj
            real(kind=8) dimension(m) :: b
            real(kind=8) dimension(m,n),depend(m,n) :: a
            real(kind=8) dimension(n),depend(n) :: x
            integer(kind=4) :: nsetp
            integer(kind=4) dimension(n),depend(n) :: index_bn
            integer(kind=4) :: npp1
            integer(kind=4) :: iz1
        end subroutine move_coef_i
        subroutine move_index_j(m,n,iz,iz2,j,up,iz1,npp1,a,index_bn,w,z,nsetp,b) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            integer(kind=4) :: iz
            integer(kind=4) :: iz2
            integer(kind=4) :: j
            real(kind=8) :: up
            integer(kind=4) :: iz1
            integer(kind=4) :: npp1
            real(kind=8) dimension(m,n) :: a
            integer(kind=4) dimension(n),depend(n) :: index_bn
            real(kind=8) dimension(n),depend(n) :: w
            real(kind=8) dimension(m),depend(m) :: z
            integer(kind=4) :: nsetp
            real(kind=8) dimension(m),depend(m) :: b
        end subroutine move_index_j
        function nrm2(n,x) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(len(x)>=n),depend(x) :: n=len(x)
            real(kind=8) dimension(n) :: x
            real(kind=8) :: nrm2
        end function nrm2
        subroutine r8mat_uniform_01(m,n,seed,r) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(shape(r,0)==m),depend(r) :: m=shape(r,0)
            integer(kind=4), optional,check(shape(r,1)==n),depend(r) :: n=shape(r,1)
            integer(kind=4) :: seed
            real(kind=8) dimension(m,n) :: r
        end subroutine r8mat_uniform_01
        subroutine r8vec_uniform_01(n,seed,r) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(len(r)>=n),depend(r) :: n=len(r)
            integer(kind=4) :: seed
            real(kind=8) dimension(n) :: r
        end subroutine r8vec_uniform_01
        subroutine rotg(sa,sb,c,s) ! in :_bvls:_bvls.f90
            real(kind=8) :: sa
            real(kind=8) :: sb
            real(kind=8) :: c
            real(kind=8) :: s
        end subroutine rotg
        subroutine select_another_coeff(m,n,iz,iz1,iz2,j,npp1,nsetp,free,up,b,bnd,index_bn,x,a,w,find,z) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(len(b)>=m),depend(b) :: m=len(b)
            integer(kind=4), optional,check(shape(bnd,1)==n),depend(bnd) :: n=shape(bnd,1)
            integer(kind=4) :: iz
            integer(kind=4) :: iz1
            integer(kind=4) :: iz2
            integer(kind=4) :: j
            integer(kind=4) :: npp1
            integer(kind=4) :: nsetp
            logical(kind=4) :: free
            real(kind=8) :: up
            real(kind=8) dimension(m) :: b
            real(kind=8) dimension(2,n) :: bnd
            integer(kind=4) dimension(n),depend(n) :: index_bn
            real(kind=8) dimension(n),depend(n) :: x
            real(kind=8) dimension(m,n),depend(m,n) :: a
            real(kind=8) dimension(n),depend(n) :: w
            logical(kind=4) :: find
            real(kind=8) dimension(m),depend(m) :: z
        end subroutine select_another_coeff
        subroutine termination(ierr,m,n,npp1,b,w,rnorm) ! in :_bvls:_bvls.f90
            integer(kind=4) :: ierr
            integer(kind=4), optional,check(len(b)>=m),depend(b) :: m=len(b)
            integer(kind=4), optional,check(len(w)>=n),depend(w) :: n=len(w)
            integer(kind=4) :: npp1
            real(kind=8) dimension(m) :: b
            real(kind=8) dimension(n) :: w
            real(kind=8) :: rnorm
        end subroutine termination
        subroutine test_coef_j(m,n,j,npp1,nsetp,free,up,b,x,a,w,find,z) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(len(b)>=m),depend(b) :: m=len(b)
            integer(kind=4), optional,check(len(x)>=n),depend(x) :: n=len(x)
            integer(kind=4) :: j
            integer(kind=4) :: npp1
            integer(kind=4) :: nsetp
            logical(kind=4) :: free
            real(kind=8) :: up
            real(kind=8) dimension(m) :: b
            real(kind=8) dimension(n) :: x
            real(kind=8) dimension(m,n),depend(m,n) :: a
            real(kind=8) dimension(n),depend(n) :: w
            logical(kind=4) :: find
            real(kind=8) dimension(m),depend(m) :: z
        end subroutine test_coef_j
        subroutine test_set_p_against_constraints(m,n,a,b,bnd,index_bn,iter,itmax,iz1,npp1,nsetp,x,z,ierr) ! in :_bvls:_bvls.f90
            integer(kind=4), optional,check(shape(a,0)==m),depend(a) :: m=shape(a,0)
            integer(kind=4), optional,check(shape(a,1)==n),depend(a) :: n=shape(a,1)
            real(kind=8) dimension(m,n) :: a
            real(kind=8) dimension(m),depend(m) :: b
            real(kind=8) dimension(2,n),depend(n) :: bnd
            integer(kind=4) dimension(n),depend(n) :: index_bn
            integer(kind=4) :: iter
            integer(kind=4) :: itmax
            integer(kind=4) :: iz1
            integer(kind=4) :: npp1
            integer(kind=4) :: nsetp
            real(kind=8) dimension(n),depend(n) :: x
            real(kind=8) dimension(m),depend(m) :: z
            integer(kind=4) :: ierr
        end subroutine test_set_p_against_constraints
        subroutine timestamp ! in :_bvls:_bvls.f90
        end subroutine timestamp
    end interface 
end python module _bvls

! This file was auto-generated with f2py (version:2).
! See http://cens.ioc.ee/projects/f2py2e/
